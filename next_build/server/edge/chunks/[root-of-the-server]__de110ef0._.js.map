{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\"\r\n\r\n// Routes to protect with app-level session auth\r\nconst protectedMatchers = [/^\\/admin(\\/.*)?$/, /^\\/api\\/feedback\\/moderation(\\/.*)?$/]\r\n\r\nfunction redirectToSignin(req: NextRequest) {\r\n  const url = new URL(\"/admin/signin\", req.url)\r\n  return NextResponse.redirect(url)\r\n}\r\n\r\n// Timing-safe string compare that works in the middleware (Edge) runtime\r\nfunction safeEqual(a: string, b: string) {\r\n  const enc = new TextEncoder()\r\n  const aBytes = enc.encode(a)\r\n  const bBytes = enc.encode(b)\r\n  const len = Math.max(aBytes.length, bBytes.length)\r\n  let result = 0\r\n  for (let i = 0; i < len; i++) {\r\n    const x = aBytes[i] ?? 0\r\n    const y = bBytes[i] ?? 0\r\n    result |= x ^ y\r\n  }\r\n  return result === 0 && aBytes.length === bBytes.length\r\n}\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  const { pathname } = req.nextUrl\r\n\r\n  // Allow the signin page and login/logout APIs without auth\r\n  const publicPaths = [\"/admin/signin\", \"/api/admin/login\", \"/api/logout\"]\r\n  if (publicPaths.includes(pathname)) return NextResponse.next()\r\n\r\n  const needsAuth = protectedMatchers.some((rx) => rx.test(pathname))\r\n  if (!needsAuth) return NextResponse.next()\r\n\r\n  // Verify session cookie matches expected token derived from env\r\n  const session = req.cookies.get(\"admin_session\")?.value || \"\"\r\n  const expectedUser = (process.env.ADMIN_USER || \"\").trim()\r\n  const expectedPass = (process.env.ADMIN_PASSWORD || \"\").trim()\r\n  const secret = (process.env.ADMIN_SECRET || \"default-secret\").trim()\r\n\r\n  const data = new TextEncoder().encode(`${expectedUser}:${expectedPass}:${secret}`)\r\n  const digest = await crypto.subtle.digest(\"SHA-256\", data)\r\n  const hashArray = Array.from(new Uint8Array(digest))\r\n  const expectedToken = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\")\r\n\r\n  if (!safeEqual(session, expectedToken)) {\r\n    return redirectToSignin(req)\r\n  }\r\n\r\n  return NextResponse.next()\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/admin/:path*\", \"/api/feedback/moderation/:path*\"],\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,gDAAgD;AAChD,MAAM,oBAAoB;IAAC;IAAoB;CAAuC;AAEtF,SAAS,iBAAiB,GAAgB;IACxC,MAAM,MAAM,IAAI,IAAI,iBAAiB,IAAI,GAAG;IAC5C,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;AAC/B;AAEA,yEAAyE;AACzE,SAAS,UAAU,CAAS,EAAE,CAAS;IACrC,MAAM,MAAM,IAAI;IAChB,MAAM,SAAS,IAAI,MAAM,CAAC;IAC1B,MAAM,SAAS,IAAI,MAAM,CAAC;IAC1B,MAAM,MAAM,KAAK,GAAG,CAAC,OAAO,MAAM,EAAE,OAAO,MAAM;IACjD,IAAI,SAAS;IACb,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;QAC5B,MAAM,IAAI,MAAM,CAAC,EAAE,IAAI;QACvB,MAAM,IAAI,MAAM,CAAC,EAAE,IAAI;QACvB,UAAU,IAAI;IAChB;IACA,OAAO,WAAW,KAAK,OAAO,MAAM,KAAK,OAAO,MAAM;AACxD;AAEO,eAAe,WAAW,GAAgB;IAC/C,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAEhC,2DAA2D;IAC3D,MAAM,cAAc;QAAC;QAAiB;QAAoB;KAAc;IACxE,IAAI,YAAY,QAAQ,CAAC,WAAW,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAE5D,MAAM,YAAY,kBAAkB,IAAI,CAAC,CAAC,KAAO,GAAG,IAAI,CAAC;IACzD,IAAI,CAAC,WAAW,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAExC,gEAAgE;IAChE,MAAM,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,SAAS;IAC3D,MAAM,eAAe,CAAC,QAAQ,GAAG,CAAC,UAAU,IAAI,EAAE,EAAE,IAAI;IACxD,MAAM,eAAe,CAAC,QAAQ,GAAG,CAAC,cAAc,IAAI,EAAE,EAAE,IAAI;IAC5D,MAAM,SAAS,CAAC,QAAQ,GAAG,CAAC,YAAY,IAAI,gBAAgB,EAAE,IAAI;IAElE,MAAM,OAAO,IAAI,cAAc,MAAM,CAAC,GAAG,aAAa,CAAC,EAAE,aAAa,CAAC,EAAE,QAAQ;IACjF,MAAM,SAAS,MAAM,OAAO,MAAM,CAAC,MAAM,CAAC,WAAW;IACrD,MAAM,YAAY,MAAM,IAAI,CAAC,IAAI,WAAW;IAC5C,MAAM,gBAAgB,UAAU,GAAG,CAAC,CAAC,IAAM,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC;IAEjF,IAAI,CAAC,UAAU,SAAS,gBAAgB;QACtC,OAAO,iBAAiB;IAC1B;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAAiB;KAAkC;AAC/D"}}]
}