{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient | undefined }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: [\"error\", \"warn\"],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;QAAS;KAAO;AACxB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/app/api/tools/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { prisma } from \"@/lib/prisma\"\r\n\r\nexport async function GET() {\r\n  try {\r\n    const tools = await prisma.tool.findMany({\r\n      orderBy: { order: \"asc\" },\r\n    })\r\n\r\n    const toolNames = tools.map((t: any) => t.name)\r\n\r\n    return NextResponse.json(toolNames)\r\n  } catch (error) {\r\n    console.error(\"Error fetching tools:\", error)\r\n    return NextResponse.json({ error: \"Failed to fetch tools\" }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACvC,SAAS;gBAAE,OAAO;YAAM;QAC1B;QAEA,MAAM,YAAY,MAAM,GAAG,CAAC,CAAC,IAAW,EAAE,IAAI;QAE9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}