{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient | undefined }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: [\"error\", \"warn\"],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;QAAS;KAAO;AACxB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/app/api/feedback/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { prisma } from \"@/lib/prisma\"\r\n\r\nexport async function GET() {\r\n  try {\r\n    const feedback = await prisma.feedback.findMany({\r\n      where: { approved: true },\r\n      orderBy: { createdAt: \"desc\" },\r\n    })\r\n    // Exclude soft-deleted on the server side\r\n    const filtered = feedback.filter((f: any) => !f.deleted)\r\n    return NextResponse.json(filtered)\r\n  } catch (e) {\r\n    console.error(\"Database error:\", e)\r\n    // Return empty array when database is unavailable\r\n    return NextResponse.json([])\r\n  }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json()\r\n    const created = await prisma.feedback.create({\r\n      data: {\r\n        name: body.name,\r\n        email: body.email,\r\n        company: body.company || null,\r\n        position: body.position || null,\r\n        message: body.message,\r\n        rating: Number(body.rating) || 5,\r\n        approved: false,\r\n      },\r\n    })\r\n    return NextResponse.json({ id: created.id })\r\n  } catch (e) {\r\n    console.error(\"Database error:\", e)\r\n    // Return success even if database is unavailable (for development)\r\n    return NextResponse.json({ id: Date.now(), message: \"Feedback received (mock mode)\" })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,+GAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC9C,OAAO;gBAAE,UAAU;YAAK;YACxB,SAAS;gBAAE,WAAW;YAAO;QAC/B;QACA,0CAA0C;QAC1C,MAAM,WAAW,SAAS,MAAM,CAAC,CAAC,IAAW,CAAC,EAAE,OAAO;QACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,mBAAmB;QACjC,kDAAkD;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,EAAE;IAC7B;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,UAAU,MAAM,+GAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC3C,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK;gBACjB,SAAS,KAAK,OAAO,IAAI;gBACzB,UAAU,KAAK,QAAQ,IAAI;gBAC3B,SAAS,KAAK,OAAO;gBACrB,QAAQ,OAAO,KAAK,MAAM,KAAK;gBAC/B,UAAU;YACZ;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI,QAAQ,EAAE;QAAC;IAC5C,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,mBAAmB;QACjC,mEAAmE;QACnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI,KAAK,GAAG;YAAI,SAAS;QAAgC;IACtF;AACF","debugId":null}}]
}