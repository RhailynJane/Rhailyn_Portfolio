{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient | undefined }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: [\"error\", \"warn\"],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;QAAS;KAAO;AACxB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/app/api/certifications/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { prisma } from \"@/lib/prisma\"\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const active = searchParams.get(\"active\")\r\n\r\n    let certifications\r\n\r\n    if (active === \"true\") {\r\n      certifications = await prisma.certification.findMany({\r\n        where: {\r\n          OR: [{ expiryDate: null }, { expiryDate: { gt: new Date() } }],\r\n        },\r\n        orderBy: { displayOrder: \"asc\" },\r\n      })\r\n    } else {\r\n      certifications = await prisma.certification.findMany({\r\n        orderBy: { displayOrder: \"asc\" },\r\n      })\r\n    }\r\n\r\n    const formattedCertifications = certifications.map((cert: any) => ({\r\n      id: cert.id,\r\n      name: cert.name,\r\n      issuing_organization: cert.issuingOrganization,\r\n      issue_date: cert.issueDate.toISOString().split(\"T\")[0],\r\n      expiry_date: cert.expiryDate ? cert.expiryDate.toISOString().split(\"T\")[0] : null,\r\n      credential_id: cert.credentialId,\r\n      credential_url: cert.credentialUrl,\r\n      description: cert.description,\r\n    }))\r\n\r\n    return NextResponse.json(formattedCertifications)\r\n  } catch (error) {\r\n    console.error(\"Error fetching certifications:\", error)\r\n    return NextResponse.json({ error: \"Failed to fetch certifications\" }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAEhC,IAAI;QAEJ,IAAI,WAAW,QAAQ;YACrB,iBAAiB,MAAM,+GAAA,CAAA,SAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACnD,OAAO;oBACL,IAAI;wBAAC;4BAAE,YAAY;wBAAK;wBAAG;4BAAE,YAAY;gCAAE,IAAI,IAAI;4BAAO;wBAAE;qBAAE;gBAChE;gBACA,SAAS;oBAAE,cAAc;gBAAM;YACjC;QACF,OAAO;YACL,iBAAiB,MAAM,+GAAA,CAAA,SAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACnD,SAAS;oBAAE,cAAc;gBAAM;YACjC;QACF;QAEA,MAAM,0BAA0B,eAAe,GAAG,CAAC,CAAC,OAAc,CAAC;gBACjE,IAAI,KAAK,EAAE;gBACX,MAAM,KAAK,IAAI;gBACf,sBAAsB,KAAK,mBAAmB;gBAC9C,YAAY,KAAK,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;gBACtD,aAAa,KAAK,UAAU,GAAG,KAAK,UAAU,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG;gBAC7E,eAAe,KAAK,YAAY;gBAChC,gBAAgB,KAAK,aAAa;gBAClC,aAAa,KAAK,WAAW;YAC/B,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiC,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}