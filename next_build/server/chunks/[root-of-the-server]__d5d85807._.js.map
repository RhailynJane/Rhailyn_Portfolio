{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient | undefined }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: [\"error\", \"warn\"],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;QAAS;KAAO;AACxB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/app/api/education/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { prisma } from \"@/lib/prisma\"\r\n\r\nexport async function GET() {\r\n  try {\r\n    const education = await prisma.education.findMany({\r\n      orderBy: { displayOrder: \"asc\" },\r\n    })\r\n\r\n    const formattedEducation = education.map((edu: any) => ({\r\n      id: edu.id,\r\n      degree: edu.degree,\r\n      field_of_study: edu.fieldOfStudy,\r\n      school: edu.school,\r\n      location: edu.location,\r\n      start_date: edu.startDate.toISOString().split(\"T\")[0],\r\n      end_date: edu.endDate ? edu.endDate.toISOString().split(\"T\")[0] : null,\r\n      is_current: edu.isCurrent,\r\n      description: edu.description,\r\n      achievements: edu.achievements,\r\n    }))\r\n\r\n    return NextResponse.json(formattedEducation)\r\n  } catch (error) {\r\n    console.error(\"Error fetching education:\", error)\r\n    return NextResponse.json({ error: \"Failed to fetch education\" }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,YAAY,MAAM,+GAAA,CAAA,SAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;YAChD,SAAS;gBAAE,cAAc;YAAM;QACjC;QAEA,MAAM,qBAAqB,UAAU,GAAG,CAAC,CAAC,MAAa,CAAC;gBACtD,IAAI,IAAI,EAAE;gBACV,QAAQ,IAAI,MAAM;gBAClB,gBAAgB,IAAI,YAAY;gBAChC,QAAQ,IAAI,MAAM;gBAClB,UAAU,IAAI,QAAQ;gBACtB,YAAY,IAAI,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;gBACrD,UAAU,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG;gBAClE,YAAY,IAAI,SAAS;gBACzB,aAAa,IAAI,WAAW;gBAC5B,cAAc,IAAI,YAAY;YAChC,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF","debugId":null}}]
}