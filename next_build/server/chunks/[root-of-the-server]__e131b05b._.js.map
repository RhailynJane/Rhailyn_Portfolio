{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient | undefined }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: [\"error\", \"warn\"],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;QAAS;KAAO;AACxB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/lib/validation.ts"],"sourcesContent":["// Lightweight input validation helpers to reduce risk of injection and invalid data\r\n\r\nexport const UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\r\n\r\nexport function isUUID(v: unknown): v is string {\r\n  return typeof v === \"string\" && UUID_REGEX.test(v)\r\n}\r\n\r\nexport function sanitizeString(v: unknown, maxLen = 256): string {\r\n  if (typeof v !== \"string\") return \"\"\r\n  const s = v.trim()\r\n  return s.length > maxLen ? s.slice(0, maxLen) : s\r\n}\r\n\r\nexport function isEmail(v: unknown): v is string {\r\n  if (typeof v !== \"string\") return false\r\n  const s = v.trim()\r\n  if (s.length === 0 || s.length > 254) return false\r\n  // RFC 5322 simplified\r\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(s)\r\n}\r\n\r\nexport function isSafeCategory(v: unknown, maxLen = 64): v is string {\r\n  if (typeof v !== \"string\") return false\r\n  const s = v.trim()\r\n  if (s.length === 0 || s.length > maxLen) return false\r\n  // allow letters, numbers, spaces, dashes, underscores, slashes\r\n  return /^[A-Za-z0-9 _\\-/]+$/.test(s)\r\n}\r\n\r\nexport function clampNumber(n: unknown, min: number, max: number, fallback: number): number {\r\n  const num = typeof n === \"number\" ? n : Number(n)\r\n  if (Number.isNaN(num)) return fallback\r\n  return Math.min(max, Math.max(min, num))\r\n}\r\n"],"names":[],"mappings":"AAAA,oFAAoF;;;;;;;;;AAE7E,MAAM,aAAa;AAEnB,SAAS,OAAO,CAAU;IAC/B,OAAO,OAAO,MAAM,YAAY,WAAW,IAAI,CAAC;AAClD;AAEO,SAAS,eAAe,CAAU,EAAE,SAAS,GAAG;IACrD,IAAI,OAAO,MAAM,UAAU,OAAO;IAClC,MAAM,IAAI,EAAE,IAAI;IAChB,OAAO,EAAE,MAAM,GAAG,SAAS,EAAE,KAAK,CAAC,GAAG,UAAU;AAClD;AAEO,SAAS,QAAQ,CAAU;IAChC,IAAI,OAAO,MAAM,UAAU,OAAO;IAClC,MAAM,IAAI,EAAE,IAAI;IAChB,IAAI,EAAE,MAAM,KAAK,KAAK,EAAE,MAAM,GAAG,KAAK,OAAO;IAC7C,sBAAsB;IACtB,OAAO,6BAA6B,IAAI,CAAC;AAC3C;AAEO,SAAS,eAAe,CAAU,EAAE,SAAS,EAAE;IACpD,IAAI,OAAO,MAAM,UAAU,OAAO;IAClC,MAAM,IAAI,EAAE,IAAI;IAChB,IAAI,EAAE,MAAM,KAAK,KAAK,EAAE,MAAM,GAAG,QAAQ,OAAO;IAChD,+DAA+D;IAC/D,OAAO,sBAAsB,IAAI,CAAC;AACpC;AAEO,SAAS,YAAY,CAAU,EAAE,GAAW,EAAE,GAAW,EAAE,QAAgB;IAChF,MAAM,MAAM,OAAO,MAAM,WAAW,IAAI,OAAO;IAC/C,IAAI,OAAO,KAAK,CAAC,MAAM,OAAO;IAC9B,OAAO,KAAK,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK;AACrC","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/app/api/feedback/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { prisma } from \"@/lib/prisma\"\r\nimport { sanitizeString, isEmail, clampNumber } from \"@/lib/validation\"\r\n\r\nexport async function GET() {\r\n  try {\r\n    const feedback = await prisma.feedback.findMany({\r\n      where: { approved: true },\r\n      orderBy: { createdAt: \"desc\" },\r\n    })\r\n    // Exclude soft-deleted on the server side\r\n    const filtered = feedback.filter((f: any) => !f.deleted)\r\n    return NextResponse.json(filtered)\r\n  } catch (e) {\r\n    console.error(\"Database error:\", e)\r\n    // Return empty array when database is unavailable\r\n    return NextResponse.json([])\r\n  }\r\n}\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json()\r\n\r\n    const name = sanitizeString(body?.name, 100)\r\n    const email = sanitizeString(body?.email, 254)\r\n    const company = sanitizeString(body?.company, 120) || null\r\n    const position = sanitizeString(body?.position, 120) || null\r\n    const message = sanitizeString(body?.message, 5000)\r\n    const rating = clampNumber(body?.rating, 1, 5, 5)\r\n\r\n    if (!name || !message) {\r\n      return NextResponse.json({ error: \"Name and message are required\" }, { status: 400 })\r\n    }\r\n    if (email && !isEmail(email)) {\r\n      return NextResponse.json({ error: \"Invalid email\" }, { status: 400 })\r\n    }\r\n\r\n    const created = await prisma.feedback.create({\r\n      data: { name, email, company, position, message, rating, approved: false },\r\n    })\r\n    return NextResponse.json({ id: created.id })\r\n  } catch (e) {\r\n    console.error(\"Database error:\", e)\r\n    // Return success even if database is unavailable (for development)\r\n    return NextResponse.json({ id: Date.now(), message: \"Feedback received (mock mode)\" })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,+GAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAC9C,OAAO;gBAAE,UAAU;YAAK;YACxB,SAAS;gBAAE,WAAW;YAAO;QAC/B;QACA,0CAA0C;QAC1C,MAAM,WAAW,SAAS,MAAM,CAAC,CAAC,IAAW,CAAC,EAAE,OAAO;QACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,mBAAmB;QACjC,kDAAkD;QAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,EAAE;IAC7B;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,OAAO,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,MAAM;QACxC,MAAM,QAAQ,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,OAAO;QAC1C,MAAM,UAAU,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,SAAS,QAAQ;QACtD,MAAM,WAAW,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,UAAU,QAAQ;QACxD,MAAM,UAAU,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD,EAAE,MAAM,SAAS;QAC9C,MAAM,SAAS,CAAA,GAAA,mHAAA,CAAA,cAAW,AAAD,EAAE,MAAM,QAAQ,GAAG,GAAG;QAE/C,IAAI,CAAC,QAAQ,CAAC,SAAS;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACrF;QACA,IAAI,SAAS,CAAC,CAAA,GAAA,mHAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,MAAM,UAAU,MAAM,+GAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC3C,MAAM;gBAAE;gBAAM;gBAAO;gBAAS;gBAAU;gBAAS;gBAAQ,UAAU;YAAM;QAC3E;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI,QAAQ,EAAE;QAAC;IAC5C,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC,mBAAmB;QACjC,mEAAmE;QACnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI,KAAK,GAAG;YAAI,SAAS;QAAgC;IACtF;AACF","debugId":null}}]
}