{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient | undefined }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ??\r\n  new PrismaClient({\r\n    log: [\"error\", \"warn\"],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;QAAS;KAAO;AACxB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///C:/professional-portfolio/app/api/experience/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { prisma } from \"@/lib/prisma\"\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const current = searchParams.get(\"current\")\r\n\r\n    let experiences\r\n\r\n    if (current === \"true\") {\r\n      experiences = await prisma.experience.findMany({\r\n        where: { isCurrent: true },\r\n        orderBy: { displayOrder: \"asc\" },\r\n      })\r\n    } else {\r\n      experiences = await prisma.experience.findMany({\r\n        orderBy: { displayOrder: \"asc\" },\r\n      })\r\n    }\r\n\r\n    const formattedExperiences = experiences.map((exp) => ({\r\n      id: exp.id,\r\n      title: exp.title,\r\n      company: exp.company,\r\n      location: exp.location,\r\n      start_date: exp.startDate.toISOString().split(\"T\")[0],\r\n      end_date: exp.endDate ? exp.endDate.toISOString().split(\"T\")[0] : null,\r\n      is_current: exp.isCurrent,\r\n      description: exp.description,\r\n      skills: exp.skills,\r\n    }))\r\n\r\n    return NextResponse.json(formattedExperiences)\r\n  } catch (error) {\r\n    console.error(\"Error fetching experience:\", error)\r\n    return NextResponse.json({ error: \"Failed to fetch experience\" }, { status: 500 })\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,UAAU,aAAa,GAAG,CAAC;QAEjC,IAAI;QAEJ,IAAI,YAAY,QAAQ;YACtB,cAAc,MAAM,+GAAA,CAAA,SAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;gBAC7C,OAAO;oBAAE,WAAW;gBAAK;gBACzB,SAAS;oBAAE,cAAc;gBAAM;YACjC;QACF,OAAO;YACL,cAAc,MAAM,+GAAA,CAAA,SAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;gBAC7C,SAAS;oBAAE,cAAc;gBAAM;YACjC;QACF;QAEA,MAAM,uBAAuB,YAAY,GAAG,CAAC,CAAC,MAAQ,CAAC;gBACrD,IAAI,IAAI,EAAE;gBACV,OAAO,IAAI,KAAK;gBAChB,SAAS,IAAI,OAAO;gBACpB,UAAU,IAAI,QAAQ;gBACtB,YAAY,IAAI,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;gBACrD,UAAU,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG;gBAClE,YAAY,IAAI,SAAS;gBACzB,aAAa,IAAI,WAAW;gBAC5B,QAAQ,IAAI,MAAM;YACpB,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA6B,GAAG;YAAE,QAAQ;QAAI;IAClF;AACF","debugId":null}}]
}